// 房间内相关消息
import "msg_common.proto";
import "msg_role_common.proto";

enum c_cmd {
    playerInfoPush = 1;
    gamePush = 2;
    userOperationReq = 3;
    userOperationResp = 4;
    gameSettlementPush = 5;
    dealCardsInfo = 6;
    stopCardInfo = 7;
    recRoomInfo = 8;
    recAnteState = 9;
    recDealCardsState = 10;
    recBuyInsState = 11;
    recRoleOpState = 12;
    recBankerOpState = 13;
    gmReq = 14;
    gmResp = 15;
}

service msg_room_bj_service {
    rpc player_info_push(undefined) returns (playerInfoPush);                   // 推送玩家信息
    rpc game_push (undefined) returns (gamePush);                               // 推送游戏状态
    rpc user_operation (userOperationReq) returns (userOperationResp);          // 玩家操作
    rpc deal_cards_info (undefined) returns (dealCardsInfo);                    // 推送发牌内容
    rpc stop_card_info (undefined) returns (stopCardInfo);                      // 推送停牌列表
    rpc game_settlement (undefined) returns (gameSettlementPush);               // 游戏结算推送
    rpc reconnect_room_info (undefined) returns (recRoomInfo);                  // 断线重连 - 房间和玩家信息
    rpc reconnect_ante_state (undefined) returns (recAnteState);                // 断线重连 - 下注阶段
    rpc reconnect_deal_cards_state (undefined) returns (recDealCardsState);     // 断线重连 - 发牌阶段
    rpc reconnect_buy_insurance_state (undefined) returns (recBuyInsState);     // 断线重连 - 买保险阶段
    rpc reconnect_role_op_state (undefined) returns (recRoleOpState);           // 断线重连 - 玩家操作阶段
    rpc reconnect_banker_op_state (undefined) returns (recBankerOpState);       // 断线重连 - 庄家操作阶段
    rpc gm (gmReq) returns (gmResp);                                            // GM
}

message playerInfoPush {
    required uint32 cur_pos = 1;
    repeated playerInfo players_info = 2;
}

message playerInfo {
    required uint32 pos = 1;        // 座位
    required string name = 2;       // 玩家名字
    required uint32 avatar = 3;     // 头像
    required uint64 chips = 4;      // 余额
}

message dealCardsInfo {
    repeated dealCardsList cards_list = 1;
}

message dealCardsList {
    required bool is_banker = 1;        // 是否是庄家
    required uint32 pos = 2;            // 这副牌所在的座位
    required uint32 which_one = 3;      // 针对闲家,该座位的哪一副牌,默认不分牌时为0
    repeated uint64 cards = 4;          // 手牌,闲家格式[A, B],庄家格式[A],A：明牌
    optional uint32 card_type = 5;      // 牌型 4：黑杰克,3：五小龙,2：普通21点,1：其他点数,0：爆牌
    required uint64 min_sum = 6;        // 手牌最小和
    required uint64 max_sum = 7;        // 手牌最大和
}

message stopCardInfo {
    repeated stopList list = 1;         // 停牌的位置列表
}

message stopList {
    required uint32 pos = 1;            // 停牌的座位号
    required uint32 which_one = 2;      // 该座位的某一副牌,0\1\2
}

message gamePush {
    required uint32 type = 1;
    // type == 1,推送房间底注、准入
    // type == 2,推送进入下注阶段
    // type == 3,推送可以下注的原位置
    // type == 4,推送可以下注的其他位置
    // type == 5,推送玩家原位置的下注消息
    // type == 6,推送玩家其他位置的下注消息
    // type == 7,推送玩家完成下注消息
    // type == 8,推送进入发牌阶段
    // type == 9,推送进入买保险阶段
    // type == 10,推送某个座位可以买保险的消息
    // type == 11,推送某个座位买保险的消息
    // type == 12,推送某个座位不买保险的消息
    // type == 13,推送某个玩家的某个座位和某一副牌可以操作消息
    // type == 14,推送某个玩家的某个座位和某一副牌进行双倍下注
    // type == 15,推送庄家暗牌不组成黑杰克
    // type == 16,推送进入庄家操作阶段消息
    // type == 17,推送某个玩家进行分牌
    // type == 18,推送某个玩家要牌
    // type == 19,推送某个玩家停牌
    // type == 20,推送庄家的暗牌
    optional uint32 pos = 2;
    // type == 3 时,pos 为该玩家的原座位号
    // type == 5 时,pos 为该玩家的原座位号
    // type == 6 时,pos 为该玩家的原座位号
    // type == 7 时,pos 为该玩家的原座位号
    // type == 10 时,pos 为该玩家的原座位号
    // type == 11 时,pos 为该玩家的原座位号
    // type == 12 时,pos 为不买保险的座位号
    // type == 13 时,pos 为当前可以操作的原座位号
    // type == 14 时,pos 为进行双倍下注的玩家原座位号
    // type == 17 时,pos 为进行分牌的玩家原座位号
    // type == 18 时,pos 为要牌的玩家原座位号
    // type == 19 时,pos 为停牌的座位号
    // type == 20 时,pos 为庄家座位 0
    repeated uint64 value = 3;
    // type == 1 时,value 为 [a, b, c],a：房间最小底注,b：房间最大底注,c：房间准入
    // type == 2 时,value 为 [a],a：下注阶段剩余时间
    // type == 4 时,value 为 [a, b, c, ...],分别都为可以下注的其他位置
    // type == 5 时,value 为 [a, b, c],a：下注的金额,b：该副牌的总下注金额,c：当前余额
    // type == 6 时,value 为 [a, b, c, d],a：其他座位号,b：下注金额,c：该副牌的总下注金额,d：当前余额
    // type == 8 时,value 为 [a],a：发牌阶段剩余时间
    // type == 9 时,value 为 [a],a：买保险阶段剩余时间
    // type == 10 时,value 为 [a],a：可以买保险的座位号
    // type == 11 时,value 为 [a, b, c],a：买保险的座位号,b：买保险的金额,c：玩家余额
    // type == 13 时,value 为 [a, b, c],a：该玩家可以操作的某一个位置
    //                                   b：可以操作的某一副牌,0\1\2
    //                                   c：玩家操作阶段剩余时间
    // type == 14 时,value 为 [a, b, c, d, e],a：双倍下注的座位号
    //                                         b：该座位的某一副牌
    //                                         c：下注的金额
    //                                         d：这副牌的总下注
    //                                         e：该玩家的余额
    // type == 17 时,value 为 [a, b, c, d],a：分牌的座位号
    //                                      b：下注的金额
    //                                      c：这副牌的总下注
    //                                      d：该玩家的余额
    // type == 19 时,value 为 [a], a：某一副牌,0\1\2
    // type == 20 时,value 为 [a, b, c, d],a：暗牌,b：牌型,c：最小点数和,d：最大点数和
}

message userOperationReq {
    required uint32 op = 1;
    // op == 1,下自己原位置的注
    // op == 2,下其他位置的注
    // op == 3,点击完成下注按钮
    // op == 4,点击买保险按钮
    // op == 5,点击不买保险按钮
    // op == 6,双倍下注
    // op == 7,分牌操作
    // op == 8,要牌操作
    // op == 9,停牌操作
    repeated uint32 value = 2;
    // op == 1 时,value 为 [a],a：下注金额
    // op == 2 时,value 为 [a, b],a：其他空位置座位号,b：下注金额
    // op == 4 时,value 为 [a],a：要买保险的座位号
    // op == 5 时,value 为 [a],a：不买保险的座位号
    // op == 6 时,value 为 [a, b],a：座位号,b：某一副牌,0\1\2
    // op == 7 时,value 为 [a, b],a：要进行分牌的座位,b：某一副牌,0\1\2
    // op == 8 时,value 为 [a, b],a：要进行分牌的座位,b：某一副牌,0\1\2
    // op == 9 时,value 为 [a, b],a：要进行分牌的座位,b：某一副牌,0\1\2
}

message userOperationResp {
    required uint32 result = 1;     // 1 成功, 2 失败
    required uint32 op = 2;         // 操作类型：
}

message gameSettlementPush {
    repeated gameResult result = 1; // 游戏结算推送
}

message gameResult {
    required uint32 pos = 1;        // 座位号
    required int64 balance = 2;     // 输赢钱,赢钱为正,输钱为负
    required uint64 chips = 3;      // 余额
    repeated posResult result = 4;  // 每个座位的结果列表
}

message posResult {
    required uint32 pos = 1;        // 座位号
    required uint32 which_one = 2;  // 某一副牌
    required int64 balance = 3;     // 该座位输赢钱金额
}

// 断线重连 - 房间信息
message recRoomInfo {
    required uint32 cur_pos = 1;            // 当前玩家原座位号
    required uint32 room_type = 2;          // 房间类型
    repeated uint64 room_info = 3;          // [最小底注, 最大底注, 准入]
    repeated playerMsg players = 4;         // 玩家信息
}

message playerMsg {
    required uint32 pos = 1;                // 座位号
    required string name = 2;               // 名字
    required uint32 avatar = 3;             // 头像
    required uint64 chips = 4;              // 余额
}

// 断线重连 - 下注阶段
message recAnteState {
    required uint32 cur_pos = 1;                    // 当前玩家原座位号
    required uint32 time_left = 2;                  // 剩余时间
    repeated anteState ante_state_pos_list = 3;     // 每个玩家的下注状态
    repeated uint32 empty_pos_list = 4;             // 整个房间空位置
}

message anteState {
    required uint32 origin_pos = 1;         // 座位号
    required uint32 state = 2;              // 是否下注完成, 0: 未完成, 1: 已完成
    repeated antedPos ante_pos_list = 3;    // 该座位的下注总金额
}

message antedPos {
    required uint32 pos = 1;                // 该玩家下注的座位号
    required uint64 ante = 2;               // 该座位的下注金额
}

// 断线重连 - 发牌阶段
message recDealCardsState {
    required uint32 cur_pos = 1;            // 当前玩家原座位号
    required uint32 time_left = 2;          // 剩余时间
    repeated cardsList cards_list = 3;      // 卡牌列表
}

// 断线重连 - 买保险阶段
message recBuyInsState {
    required uint32 cur_pos = 1;            // 当前玩家原座位号
    required uint32 time_left = 2;          // 剩余时间
    repeated insList ins_pos_list = 3;      // 保险座位列表
    repeated cardsList cards_list = 4;      // 卡牌列表
}

message insList {
    required uint32 pos = 1;                // 某个玩家的原座位号
    repeated insPosList ins_pos = 2;        // 该玩家所有座位号和保险金额
    required uint32 active = 3;             // 该玩家当前可以买保险的座位号, a: 座位号, 若 a =:= 0 则没有座位可以买
}

message insPosList {
    required uint32 pos = 1;                // 某个玩家买过保险的座位号
    required uint64 ins_ante_chips = 2;     // 某个玩家在该座位买保险的金额
}

// 断线重连 - 玩家操作阶段
message recRoleOpState {
    required uint32 cur_pos = 1;            // 当前玩家座位号
    required uint32 time_left = 2;          // 剩余时间
    required uint32 op_origin_pos = 3;      // 可以操作的原座位号
    required uint32 op_pos = 4;             // 可以操作的座位号
    required uint32 op_which_one = 5;       // 某一副牌可以操作
    repeated cardsList cards_list = 6;      // 卡牌列表
}

// 断线重连 - 庄家操作阶段
message recBankerOpState {
    required uint32 cur_pos = 1;            // 当前玩家座位号
    repeated cardsList cards_list = 2;      // 卡牌列表
}

// 用于断线重连时收集所有人手牌信息
message cardsList {
    required uint32 pos = 1;                // 卡牌座位
    required uint32 which_one = 2;          // 某一副牌 0\1\2
    repeated uint64 cards = 3;              // 手牌
    optional uint32 card_type = 4;          // 手牌类型
    required uint32 min_sum = 5;            // 最小和
    required uint32 max_sum = 6;            // 最大和
    optional uint64 ante_chips = 7;         // 下注总金额
}

// GM
message gmReq {
    required uint32 room_type = 1;          // 房间类型
    required uint32 player_num = 2;         // 玩家人数
    repeated gmCardsList cards_list = 3;    // 玩家手牌
}

message gmCardsList {
    required uint32 pos = 1;                // 座位, 庄家: 0, 其他: 1~5
    repeated uint64 cards = 2;              // 玩家所有牌
}

message gmResp {
    required uint32 result = 1;             // 1: 成功, 2: 失败
}